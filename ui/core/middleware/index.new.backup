import type { Router } from 'vue-router'
import type { Middleware, MiddlewareContext } from './types'
import { defineMiddleware, registerMiddleware as registerNuxtMiddleware, autoRegisterMiddleware } from './runner'

// Import middleware
import authMiddleware from './auth'
import guestMiddleware from './guest'
import publicMiddleware from './public'
import adminMiddleware from './admin'
import loadingMiddleware from './loading'

export interface MiddlewareConfig {
  global?: string[]
  named?: Record<string, string>
}

/**
 * Initialize Nuxt-style middleware system
 */
export async function initializeMiddleware(router: Router) {
  // Register named middleware
  defineMiddleware('auth', authMiddleware)
  defineMiddleware('guest', guestMiddleware)
  defineMiddleware('public', publicMiddleware)
  defineMiddleware('admin', adminMiddleware)
  defineMiddleware('loading', loadingMiddleware)

  // Auto-register any additional middleware files
  await autoRegisterMiddleware()

  // Register the middleware runner with the router
  registerNuxtMiddleware(router)

  console.log('âœ… Nuxt-style middleware initialized')
}

/**
 * Legacy function for backward compatibility
 */
export function registerMiddleware(router: Router, config: MiddlewareConfig) {
  return initializeMiddleware(router)
}

export * from './types'
export * from './runner'