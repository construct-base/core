import type { MiddlewareContext } from './types'

export default function authMiddleware(context: MiddlewareContext) {
  const { to, redirect, auth } = context

  console.log(`🔐 Auth middleware: ${to.path}, isAuthenticated: ${auth.isAuthenticated.value}`)

  if (!auth.isAuthenticated.value) {
    localStorage.setItem('redirectTo', to.fullPath)
    return redirect('/auth/login', { redirect: to.fullPath })
  }

  // Check for role-based access
  if (to.meta?.roles && auth.user.value) {
    const userRoles = auth.user.value.roles || []
    const requiredRoles = Array.isArray(to.meta.roles) ? to.meta.roles : [to.meta.roles]

    const hasRequiredRole = requiredRoles.some(role =>
      typeof role === 'string'
        ? userRoles.some(r => typeof r === 'string' ? r === role : r.name === role)
        : false
    )

    if (!hasRequiredRole) {
      return redirect('/unauthorized')
    }
  }
}