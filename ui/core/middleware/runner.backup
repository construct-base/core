import type { Router, RouteLocationNormalized, NavigationGuardNext } from 'vue-router'
import type { Middleware, MiddlewareContext, MiddlewareDefinition } from './types'
import { useAuth } from '../composables/useAuth'
import { useRouter, useRoute } from 'vue-router'

// Global middleware storage
const globalMiddleware: MiddlewareDefinition[] = []
const namedMiddleware: Map<string, Middleware> = new Map()

/**
 * Define a global middleware that runs on every route change
 */
export function defineGlobalMiddleware(middleware: Middleware, options?: { order?: number }) {
  globalMiddleware.push({
    name: 'global-' + globalMiddleware.length,
    handler: middleware,
    global: true,
    order: options?.order ?? 100
  })

  // Sort by order
  globalMiddleware.sort((a, b) => (a.order ?? 100) - (b.order ?? 100))
}

/**
 * Define a named middleware
 */
export function defineMiddleware(name: string, middleware: Middleware) {
  namedMiddleware.set(name, middleware)
}

/**
 * Create middleware context
 */
function createMiddlewareContext(
  to: RouteLocationNormalized,
  from: RouteLocationNormalized,
  next: NavigationGuardNext
): MiddlewareContext {
  const router = useRouter()
  const route = useRoute()
  const auth = useAuth()

  return {
    to,
    from,
    next,
    auth,
    router,
    route,
    $fetch: fetch,
    redirect: (path: string, query?: Record<string, any>) => {
      next({ path, query })
    },
    abort: (statusCode?: number, statusMessage?: string) => {
      console.error(`Middleware aborted: ${statusCode} - ${statusMessage}`)
      next(false)
    },
    navigate: (path: string, options?: any) => {
      if (options?.external) {
        window.location.href = path
      } else if (options?.replace) {
        next({ path, replace: true })
      } else {
        next({ path })
      }
    }
  }
}

/**
 * Run a single middleware
 */
async function runMiddleware(
  middleware: Middleware,
  context: MiddlewareContext
): Promise<boolean> {
  try {
    let nextCalled = false
    let redirected = false

    // Wrap the context to track if redirect/abort was called
    const wrappedContext: MiddlewareContext = {
      ...context,
      redirect: (path: string, query?: Record<string, any>) => {
        redirected = true
        context.redirect(path, query)
      },
      abort: (statusCode?: number, statusMessage?: string) => {
        redirected = true
        context.abort(statusCode, statusMessage)
      },
      navigate: (path: string, options?: any) => {
        redirected = true
        context.navigate(path, options)
      }
    }

    await middleware(wrappedContext)

    return !redirected
  } catch (error) {
    console.error('Middleware error:', error)
    return false
  }
}

/**
 * Register middleware with Vue Router
 */
export function registerMiddleware(router: Router) {
  router.beforeEach(async (to, from, next) => {
    const context = createMiddlewareContext(to, from, next)

    // Run global middleware first
    for (const def of globalMiddleware) {
      const shouldContinue = await runMiddleware(def.handler, context)
      if (!shouldContinue) return // Middleware handled the navigation
    }

    // Get route middleware from meta
    const routeMiddleware = to.meta?.middleware as string[] | string | undefined

    if (routeMiddleware) {
      const middlewares = Array.isArray(routeMiddleware) ? routeMiddleware : [routeMiddleware]

      for (const name of middlewares) {
        const middleware = namedMiddleware.get(name)

        if (!middleware) {
          console.warn(`Middleware '${name}' not found`)
          continue
        }

        const shouldContinue = await runMiddleware(middleware, context)
        if (!shouldContinue) return // Middleware handled the navigation
      }
    }

    // If we get here, all middleware passed
    next()
  })

  console.log('âœ… Nuxt-style middleware registered successfully')
}

/**
 * Auto-register middleware from files
 */
export async function autoRegisterMiddleware() {
  // Import all middleware files
  const modules = import.meta.glob<{ default: Middleware }>('./!(types|runner|index).ts')

  for (const [path, importFn] of Object.entries(modules)) {
    const name = path.replace('./', '').replace('.ts', '').replace('.nuxt', '')

    try {
      const module = await importFn()
      if (module.default) {
        defineMiddleware(name, module.default)
        console.log(`ðŸ“¦ Registered middleware: ${name}`)
      }
    } catch (error) {
      console.error(`Failed to load middleware ${name}:`, error)
    }
  }
}